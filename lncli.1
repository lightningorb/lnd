.\" Automatically generated by Pandoc 2.5
.\"
.TH "" "" "" "" ""
.hy
.PP
# \[ga]lncli\[ga] 0.15.99\-beta
commit=cert/v1.2.1\-25\-gf245591e4\-dirty \- <>
.PP
## Subcommands
.PP
### \[ga]create\[ga]
.PP
Initialize a wallet when starting lnd for the first time.
.PP
The create command is used to initialize an lnd wallet from scratch for
the very first time.
This is interactive command with one required argument (the password),
and one optional argument (the mnemonic passphrase).
.PP
The first argument (the password) is required and MUST be greater than 8
characters.
This will be used to encrypt the wallet within lnd.
This MUST be remembered as it will be required to fully start up the
daemon.
.PP
The second argument is an optional 24\-word mnemonic derived from BIP
39.
If provided, then the internal wallet will use the seed derived from
this mnemonic to generate all keys.
.PP
This command returns a 24\-word seed in the scenario that NO mnemonic
was provided by the user.
This should be written down as it can be used to potentially recover all
on\-chain funds, and most off\-chain funds as well.
.PP
If the \-\-stateless_init flag is set, no macaroon files are created by
the daemon.
Instead, the binary serialized admin macaroon is returned in the answer.
This answer MUST be stored somewhere, otherwise all access to the RPC
server will be lost and the wallet must be recreated to re\-gain access.
If the \-\-save_to parameter is set, the macaroon is saved to this file,
otherwise it is printed to standard out.
.PP
Finally, it\[aq]s also possible to use this command and a set of static
channel backups to trigger a recover attempt for the provided Static
Channel Backups.
Only one of the three parameters will be accepted.
See the restorechanbackup command for further details w.r.t the format
accepted.
.PP
#### Flags
.PP
\- \[ga]\-\-single_backup\[ga] \- \[ga]\-\-multi_backup\[ga] \-
\[ga]\-\-multi_file\[ga] \- \[ga]\-\-stateless_init\[ga] \-
\[ga]\-\-save_to\[ga]
.PP
### \[ga]createwatchonly\[ga]
.PP
Initialize a watch\-only wallet after starting lnd for the first time.
.PP
The create command is used to initialize an lnd wallet from scratch for
the very first time, in watch\-only mode.
Watch\-only means, there will be no private keys in lnd\[aq]s wallet.
This is only useful in combination with a remote signer or when lnd
should be used as an on\-chain wallet with PSBT interaction only.
.PP
This is an interactive command that takes a JSON file as its first and
only argument.
The JSON is in the same format as the output of the \[aq]lncli wallet
accounts list\[aq] command.
This makes it easy to initialize the remote signer with the seed, then
export the extended public account keys (xpubs) to import the
watch\-only wallet.
.PP
Example JSON (non\-mandatory or ignored fields are omitted): {
\[dq]accounts\[dq]: [ { \[dq]extended_public_key\[dq]:
\[dq]upub5Eep7....\[dq], \[dq]derivation_path\[dq]:
\[dq]m/49\[aq]/0\[aq]/0\[aq]\[dq] }, { \[dq]extended_public_key\[dq]:
\[dq]vpub5ZU1PH...\[dq], \[dq]derivation_path\[dq]:
\[dq]m/84\[aq]/0\[aq]/0\[aq]\[dq] }, { \[dq]extended_public_key\[dq]:
\[dq]tpubDDXFH...\[dq], \[dq]derivation_path\[dq]:
\[dq]m/1017\[aq]/1\[aq]/0\[aq]\[dq] }, ...
{ \[dq]extended_public_key\[dq]: \[dq]tpubDDXFH...\[dq],
\[dq]derivation_path\[dq]: \[dq]m/1017\[aq]/1\[aq]/9\[aq]\[dq] } ] }
.PP
There must be an account for each of the existing key families that lnd
uses internally (currently 0\-9, see keychain/derivation.go).
.PP
Read the documentation under docs/remote\-signing.md for more
information on how to set up a remote signing node over RPC.
.PP
### \[ga]unlock\[ga]
.PP
Unlock an encrypted wallet at startup.
.PP
The unlock command is used to decrypt lnd\[aq]s wallet state in order to
start up.
This command MUST be run after booting up lnd before it\[aq]s able to
carry out its duties.
An exception is if a user is running with \-\-noseedbackup, then a
default passphrase will be used.
.PP
If the \-\-stateless_init flag is set, no macaroon files are created by
the daemon.
This should be set for every unlock if the daemon was initially
initialized stateless.
Otherwise the daemon will create unencrypted macaroon files which could
leak information to the system that the daemon runs on.
.PP
#### Flags
.PP
\- \[ga]\-\-recovery_window\[ga] \- \[ga]\-\-stdin\[ga] \-
\[ga]\-\-stateless_init\[ga]
.PP
### \[ga]changepassword\[ga]
.PP
Change an encrypted wallet\[aq]s password at startup.
.PP
The changepassword command is used to Change lnd\[aq]s encrypted
wallet\[aq]s password.
It will automatically unlock the daemon if the password change is
successful.
.PP
If one did not specify a password for their wallet (running lnd with
\-\-noseedbackup), one must restart their daemon without
\-\-noseedbackup and use this command.
The \[dq]current password\[dq] field should be left empty.
.PP
If the daemon was originally initialized stateless, then the
\-\-stateless_init flag needs to be set for the change password request
as well! Otherwise the daemon will generate unencrypted macaroon files
in its file system again and possibly leak sensitive information.
Changing the password will by default not change the macaroon root key
(just re\-encrypt the macaroon database with the new password).
So all macaroons will still be valid.
If one wants to make sure that all previously created macaroons are
invalidated, a new macaroon root key can be generated by using the
\-\-new_mac_root_key flag.
.PP
After a successful password change with the \-\-stateless_init flag set,
the current or new admin macaroon is returned binary serialized in the
answer.
This answer MUST then be stored somewhere, otherwise all access to the
RPC server will be lost and the wallet must be re\- created to re\-gain
access.
If the \-\-save_to parameter is set, the macaroon is saved to this file,
otherwise it is printed to standard out.
.PP
#### Flags
.PP
\- \[ga]\-\-stateless_init\[ga] \- \[ga]\-\-save_to\[ga] \-
\[ga]\-\-new_mac_root_key\[ga]
.PP
### \[ga]newaddress\[ga]
.PP
Generates a new address.
.PP
Generate a wallet new address.
Address\-types has to be one of: \- p2wkh: Pay to witness key hash \-
np2wkh: Pay to nested witness key hash \- p2tr: Pay to taproot pubkey
.PP
#### Flags
.PP
\- \[ga]\-\-account\[ga]
.PP
### \[ga]estimatefee\[ga]
.PP
Get fee estimates for sending bitcoin on\-chain to multiple addresses.
.PP
Get fee estimates for sending a transaction paying the specified
amount(s) to the passed address(es).
.PP
The send\-json\-string\[aq] param decodes addresses and the amount to
send respectively in the following format:
.PP
\[aq]{\[dq]ExampleAddr\[dq]: NumCoinsInSatoshis, \[dq]SecondAddr\[dq]:
NumCoins}\[aq]
.PP
#### Flags
.PP
\- \[ga]\-\-conf_target\[ga]
.PP
### \[ga]sendmany\[ga]
.PP
Send bitcoin on\-chain to multiple addresses.
.PP
Create and broadcast a transaction paying the specified amount(s) to the
passed address(es).
.PP
The send\-json\-string\[aq] param decodes addresses and the amount to
send respectively in the following format:
.PP
\[aq]{\[dq]ExampleAddr\[dq]: NumCoinsInSatoshis, \[dq]SecondAddr\[dq]:
NumCoins}\[aq]
.PP
#### Flags
.PP
\- \[ga]\-\-conf_target\[ga] \- \[ga]\-\-sat_per_byte\[ga] \-
\[ga]\-\-sat_per_vbyte\[ga] \- \[ga]\-\-min_confs\[ga] \-
\[ga]\-\-label\[ga]
.PP
### \[ga]sendcoins\[ga]
.PP
Send bitcoin on\-chain to an address.
.PP
Send amt coins in satoshis to the base58 or bech32 encoded bitcoin
address addr.
.PP
Fees used when sending the transaction can be specified via the
\-\-conf_target, or \-\-sat_per_vbyte optional flags.
.PP
Positional arguments and flags can be used interchangeably but not at
the same time!
.PP
#### Flags
.PP
\- \[ga]\-\-addr\[ga] \- \[ga]\-\-sweepall\[ga] \- \[ga]\-\-amt\[ga] \-
\[ga]\-\-conf_target\[ga] \- \[ga]\-\-sat_per_byte\[ga] \-
\[ga]\-\-sat_per_vbyte\[ga] \- \[ga]\-\-min_confs\[ga] \-
\[ga]\-\-label\[ga]
.PP
### \[ga]listunspent\[ga]
.PP
List utxos available for spending.
.PP
For each spendable utxo currently in the wallet, with at least min_confs
confirmations, and at most max_confs confirmations, lists the txid,
index, amount, address, address type, scriptPubkey and number of
confirmations.
Use \-\-min_confs=0 to include unconfirmed coins.
To list all coins with at least min_confs confirmations, omit the second
argument or flag \[aq]\-\-max_confs\[aq].
To list all confirmed and unconfirmed coins, no arguments are required.
To see only unconfirmed coins, use \[aq]\-\-unconfirmed_only\[aq] with
\[aq]\-\-min_confs\[aq] and \[aq]\-\-max_confs\[aq] set to zero or not
present.
.PP
#### Flags
.PP
\- \[ga]\-\-min_confs\[ga] \- \[ga]\-\-max_confs\[ga] \-
\[ga]\-\-unconfirmed_only\[ga]
.PP
### \[ga]connect\[ga]
.PP
Connect to a remote lnd peer.
.PP
Connect to a peer using its <pubkey> and host.
.PP
A custom timeout on the connection is supported.
For instance, to timeout the connection request in 30 seconds, use the
following:
.PP
lncli connect <pubkey>\[at]host \-\-timeout 30s
.PP
#### Flags
.PP
\- \[ga]\-\-perm\[ga] \- \[ga]\-\-timeout\[ga]
.PP
### \[ga]disconnect\[ga]
.PP
Disconnect a remote lnd peer identified by public key.
.PP
#### Flags
.PP
\- \[ga]\-\-node_key\[ga]
.PP
### \[ga]openchannel\[ga]
.PP
Open a channel to a node or an existing peer.
.PP
Attempt to open a new channel to an existing peer with the key node\-key
optionally blocking until the channel is \[aq]open\[aq].
.PP
One can also connect to a node before opening a new channel to it by
setting its host:port via the \-\-connect argument.
For this to work, the node_key must be provided, rather than the
peer_id.
This is optional.
.PP
The channel will be initialized with local\-amt satoshis local and
push\-amt satoshis for the remote node.
Note that specifying push\-amt means you give that amount to the remote
node as part of the channel opening.
Once the channel is open, a channelPoint (txid:vout) of the funding
output is returned.
.PP
If the remote peer supports the option upfront shutdown feature bit
(query listpeers to see their supported feature bits), an address to
enforce payout of funds on cooperative close can optionally be provided.
Note that if you set this value, you will not be able to cooperatively
close out to another address.
.PP
One can manually set the fee to be used for the funding transaction via
either the \-\-conf_target or \-\-sat_per_vbyte arguments.
This is optional.
.PP
#### Flags
.PP
\- \[ga]\-\-node_key\[ga] \- \[ga]\-\-connect\[ga] \-
\[ga]\-\-local_amt\[ga] \- \[ga]\-\-base_fee_msat\[ga] \-
\[ga]\-\-fee_rate_ppm\[ga] \- \[ga]\-\-push_amt\[ga] \-
\[ga]\-\-block\[ga] \- \[ga]\-\-conf_target\[ga] \-
\[ga]\-\-sat_per_byte\[ga] \- \[ga]\-\-sat_per_vbyte\[ga] \-
\[ga]\-\-private\[ga] \- \[ga]\-\-min_htlc_msat\[ga] \-
\[ga]\-\-remote_csv_delay\[ga] \- \[ga]\-\-max_local_csv\[ga] \-
\[ga]\-\-min_confs\[ga] \- \[ga]\-\-close_address\[ga] \-
\[ga]\-\-psbt\[ga] \- \[ga]\-\-base_psbt\[ga] \-
\[ga]\-\-no_publish\[ga] \-
\[ga]\-\-remote_max_value_in_flight_msat\[ga] \-
\[ga]\-\-channel_type\[ga] \- \[ga]\-\-zero_conf\[ga] \-
\[ga]\-\-scid_alias\[ga] \- \[ga]\-\-remote_reserve_sats\[ga]
.PP
### \[ga]batchopenchannel\[ga]
.PP
Open multiple channels to existing peers in a single transaction.
.PP
Attempt to open one or more new channels to an existing peer with the
given node\-keys.
.PP
Example: lncli batchopenchannel \-\-sat_per_vbyte=5 \[aq][{
\[dq]node_pubkey\[dq]: \[dq]02abcdef...\[dq],
\[dq]local_funding_amount\[dq]: 500000, \[dq]private\[dq]: true,
\[dq]close_address\[dq]: \[dq]bc1qxxx...\[dq] }, {
\[dq]node_pubkey\[dq]: \[dq]03fedcba...\[dq],
\[dq]local_funding_amount\[dq]: 200000, \[dq]remote_csv_delay\[dq]: 288
}]\[aq]
.PP
All nodes listed must already be connected peers, otherwise funding will
fail.
.PP
The channel will be initialized with local_funding_amount satoshis
locally and push_sat satoshis for the remote node.
Note that specifying push_sat means you give that amount to the remote
node as part of the channel opening.
Once the channel is open, a channelPoint (txid:vout) of the funding
output is returned.
.PP
If the remote peer supports the option upfront shutdown feature bit
(query listpeers to see their supported feature bits), an address to
enforce payout of funds on cooperative close can optionally be provided.
Note that if you set this value, you will not be able to cooperatively
close out to another address.
.PP
One can manually set the fee to be used for the funding transaction via
either the \-\-conf_target or \-\-sat_per_vbyte arguments.
This is optional.
.PP
#### Flags
.PP
\- \[ga]\-\-conf_target\[ga] \- \[ga]\-\-sat_per_vbyte\[ga] \-
\[ga]\-\-min_confs\[ga] \- \[ga]\-\-label\[ga]
.PP
### \[ga]closechannel\[ga]
.PP
Close an existing channel.
.PP
Close an existing channel.
The channel can be closed either cooperatively, or unilaterally
(\-\-force).
.PP
A unilateral channel closure means that the latest commitment
transaction will be broadcast to the network.
As a result, any settled funds will be time locked for a few blocks
before they can be spent.
.PP
In the case of a cooperative closure, one can manually set the fee to be
used for the closing transaction via either the \-\-conf_target or
\-\-sat_per_vbyte arguments.
This will be the starting value used during fee negotiation.
This is optional.
.PP
In the case of a cooperative closure, one can manually set the address
to deliver funds to upon closure.
This is optional, and may only be used if an upfront shutdown address
has not already been set.
If neither are set the funds will be delivered to a new wallet address.
.PP
To view which funding_txids/output_indexes can be used for a channel
close, see the channel_point values within the listchannels command
output.
The format for a channel_point is \[aq]funding_txid:output_index\[aq].
.PP
#### Flags
.PP
\- \[ga]\-\-funding_txid\[ga] \- \[ga]\-\-output_index\[ga] \-
\[ga]\-\-chan_point\[ga] \- \[ga]\-\-force\[ga] \- \[ga]\-\-block\[ga]
\- \[ga]\-\-conf_target\[ga] \- \[ga]\-\-sat_per_byte\[ga] \-
\[ga]\-\-sat_per_vbyte\[ga] \- \[ga]\-\-delivery_addr\[ga]
.PP
### \[ga]closeallchannels\[ga]
.PP
Close all existing channels.
.PP
Close all existing channels.
.PP
Channels will be closed either cooperatively or unilaterally, depending
on whether the channel is active or not.
If the channel is inactive, any settled funds within it will be time
locked for a few blocks before they can be spent.
.PP
One can request to close inactive channels only by using the
\-\-inactive_only flag.
.PP
By default, one is prompted for confirmation every time an inactive
channel is requested to be closed.
To avoid this, one can set the \-\-force flag, which will only prompt
for confirmation once for all inactive channels and proceed to close
them.
.PP
In the case of cooperative closures, one can manually set the fee to be
used for the closing transactions via either the \-\-conf_target or
\-\-sat_per_vbyte arguments.
This will be the starting value used during fee negotiation.
This is optional.
.PP
#### Flags
.PP
\- \[ga]\-\-inactive_only\[ga] \- \[ga]\-\-force\[ga] \-
\[ga]\-\-conf_target\[ga] \- \[ga]\-\-sat_per_byte\[ga] \-
\[ga]\-\-sat_per_vbyte\[ga]
.PP
### \[ga]abandonchannel\[ga]
.PP
Abandons an existing channel.
.PP
Removes all channel state from the database except for a close summary.
This method can be used to get rid of permanently unusable channels due
to bugs fixed in newer versions of lnd.
.PP
Only available when lnd is built in debug mode.
The flag \-\-i_know_what_i_am_doing can be set to override the debug/dev
mode requirement.
.PP
To view which funding_txids/output_indexes can be used for this command,
see the channel_point values within the listchannels command output.
The format for a channel_point is \[aq]funding_txid:output_index\[aq].
.PP
#### Flags
.PP
\- \[ga]\-\-funding_txid\[ga] \- \[ga]\-\-output_index\[ga] \-
\[ga]\-\-chan_point\[ga] \- \[ga]\-\-i_know_what_i_am_doing\[ga]
.PP
### \[ga]listpeers\[ga]
.PP
List all active, currently connected peers.
.PP
#### Flags
.PP
\- \[ga]\-\-list_errors\[ga]
.PP
### \[ga]walletbalance\[ga]
.PP
Compute and display the wallet\[aq]s current balance.
.PP
### \[ga]channelbalance\[ga]
.PP
Returns the sum of the total available channel balance across all open
channels.
.PP
### \[ga]getinfo\[ga]
.PP
Returns basic information related to the active daemon.
.PP
### \[ga]getrecoveryinfo\[ga]
.PP
Display information about an ongoing recovery attempt.
.PP
### \[ga]pendingchannels\[ga]
.PP
Display information pertaining to pending channels.
.PP
### \[ga]sendpayment\[ga]
.PP
Send a payment over lightning.
.PP
Send a payment over Lightning.
One can either specify the full parameters of the payment, or just use a
payment request which encodes all the payment details.
.PP
If payment isn\[aq]t manually specified, then only a payment request
needs to be passed using the \-\-pay_req argument.
.PP
If the payment *is* manually specified, then the following arguments
need to be specified in order to complete the payment:
.PP
For invoice with keysend, \-\-dest=N \-\-amt=A \-\-final_cltv_delta=T
\-\-keysend For invoice without payment address: \-\-dest=N \-\-amt=A
\-\-payment_hash=H \-\-final_cltv_delta=T For invoice with payment
address: \-\-dest=N \-\-amt=A \-\-payment_hash=H \-\-final_cltv_delta=T
\-\-pay_addr=H
.PP
#### Flags
.PP
\- \[ga]\-\-pay_req\[ga] \- \[ga]\-\-fee_limit\[ga] \-
\[ga]\-\-fee_limit_percent\[ga] \- \[ga]\-\-timeout\[ga] \-
\[ga]\-\-cltv_limit\[ga] \- \[ga]\-\-last_hop\[ga] \-
\[ga]\-\-outgoing_chan_id\[ga] \- \[ga]\-\-force, f\[ga] \-
\[ga]\-\-allow_self_payment\[ga] \- \[ga]\-\-data\[ga] \-
\[ga]\-\-inflight_updates\[ga] \- \[ga]\-\-max_parts\[ga] \-
\[ga]\-\-json\[ga] \- \[ga]\-\-max_shard_size_sat\[ga] \-
\[ga]\-\-max_shard_size_msat\[ga] \- \[ga]\-\-amp\[ga] \-
\[ga]\-\-time_pref\[ga] \- \[ga]\-\-dest, d\[ga] \- \[ga]\-\-amt, a\[ga]
\- \[ga]\-\-payment_hash, r\[ga] \- \[ga]\-\-final_cltv_delta\[ga] \-
\[ga]\-\-pay_addr\[ga] \- \[ga]\-\-keysend\[ga]
.PP
### \[ga]payinvoice\[ga]
.PP
Pay an invoice over lightning.
.PP
#### Flags
.PP
\- \[ga]\-\-pay_req\[ga] \- \[ga]\-\-fee_limit\[ga] \-
\[ga]\-\-fee_limit_percent\[ga] \- \[ga]\-\-timeout\[ga] \-
\[ga]\-\-cltv_limit\[ga] \- \[ga]\-\-last_hop\[ga] \-
\[ga]\-\-outgoing_chan_id\[ga] \- \[ga]\-\-force, f\[ga] \-
\[ga]\-\-allow_self_payment\[ga] \- \[ga]\-\-data\[ga] \-
\[ga]\-\-inflight_updates\[ga] \- \[ga]\-\-max_parts\[ga] \-
\[ga]\-\-json\[ga] \- \[ga]\-\-max_shard_size_sat\[ga] \-
\[ga]\-\-max_shard_size_msat\[ga] \- \[ga]\-\-amp\[ga] \-
\[ga]\-\-time_pref\[ga] \- \[ga]\-\-amt\[ga]
.PP
### \[ga]sendtoroute\[ga]
.PP
Send a payment over a predefined route.
.PP
Send a payment over Lightning using a specific route.
One must specify the route to attempt and the payment hash.
This command can even be chained with the response to queryroutes or
buildroute.
This command can be used to implement channel rebalancing by crafting a
self\-route, or even atomic swaps using a self\-route that crosses
multiple chains.
.PP
There are three ways to specify a route: * using the \-\-routes
parameter to manually specify a JSON encoded route in the format of the
return value of queryroutes or buildroute: (lncli sendtoroute
\-\-payment_hash=<pay_hash> \-\-routes=<route>)
.PP
* passing the route as a positional argument: (lncli sendtoroute
\-\-payment_hash=pay_hash <route>)
.PP
* or reading in the route from stdin, which can allow chaining the
response from queryroutes or buildroute, or even read in a file with a
pre\-computed route: (lncli queryroutes \-\-args..
| lncli sendtoroute \-\-payment_hash= \-
.PP
notice the \[aq]\-\[aq] at the end, which signals that lncli should read
the route in from stdin
.PP
#### Flags
.PP
\- \[ga]\-\-payment_hash, pay_hash\[ga] \- \[ga]\-\-routes, r\[ga] \-
\[ga]\-\-skip_temp_err\[ga]
.PP
### \[ga]addinvoice\[ga]
.PP
Add a new invoice.
.PP
Add a new invoice, expressing intent for a future payment.
.PP
Invoices without an amount can be created by not supplying any
parameters or providing an amount of 0.
These invoices allow the payer to specify the amount of satoshis they
wish to send.
.PP
#### Flags
.PP
\- \[ga]\-\-memo\[ga] \- \[ga]\-\-preimage\[ga] \- \[ga]\-\-amt\[ga] \-
\[ga]\-\-amt_msat\[ga] \- \[ga]\-\-description_hash\[ga] \-
\[ga]\-\-fallback_addr\[ga] \- \[ga]\-\-expiry\[ga] \-
\[ga]\-\-private\[ga] \- \[ga]\-\-amp\[ga]
.PP
### \[ga]lookupinvoice\[ga]
.PP
Lookup an existing invoice by its payment hash.
.PP
#### Flags
.PP
\- \[ga]\-\-rhash\[ga]
.PP
### \[ga]listinvoices\[ga]
.PP
List all invoices currently stored within the database.
Any active debug invoices are ignored.
.PP
This command enables the retrieval of all invoices currently stored
within the database.
It has full support for paginationed responses, allowing users to query
for specific invoices through their add_index.
This can be done by using either the first_index_offset or
last_index_offset fields included in the response as the index_offset of
the next request.
Backward pagination is enabled by default to receive current invoices
first.
If you wish to paginate forwards, set the paginate\-forwards flag.
If none of the parameters are specified, then the last 100 invoices will
be returned.
.PP
For example: if you have 200 invoices, \[dq]lncli listinvoices\[dq] will
return the last 100 created.
If you wish to retrieve the previous 100, the first_offset_index of the
response can be used as the index_offset of the next listinvoices
request.
.PP
#### Flags
.PP
\- \[ga]\-\-pending_only\[ga] \- \[ga]\-\-index_offset\[ga] \-
\[ga]\-\-max_invoices\[ga] \- \[ga]\-\-paginate\-forwards\[ga] \-
\[ga]\-\-creation_date_start\[ga] \- \[ga]\-\-creation_date_end\[ga]
.PP
### \[ga]listchannels\[ga]
.PP
List all open channels.
.PP
#### Flags
.PP
\- \[ga]\-\-active_only\[ga] \- \[ga]\-\-inactive_only\[ga] \-
\[ga]\-\-public_only\[ga] \- \[ga]\-\-private_only\[ga] \-
\[ga]\-\-peer\[ga]
.PP
### \[ga]closedchannels\[ga]
.PP
List all closed channels.
.PP
#### Flags
.PP
\- \[ga]\-\-cooperative\[ga] \- \[ga]\-\-local_force\[ga] \-
\[ga]\-\-remote_force\[ga] \- \[ga]\-\-breach\[ga] \-
\[ga]\-\-funding_canceled\[ga] \- \[ga]\-\-abandoned\[ga]
.PP
### \[ga]listpayments\[ga]
.PP
List all outgoing payments.
.PP
This command enables the retrieval of payments stored in the database.
.PP
Pagination is supported by the usage of index_offset in combination with
the paginate_forwards flag.
Reversed pagination is enabled by default to receive current payments
first.
Pagination can be resumed by using the returned last_index_offset (for
forwards order), or first_index_offset (for reversed order) as the
offset_index.
.PP
Because counting all payments in the payment database can take a long
time on systems with many payments, the count is not returned by
default.
That feature can be turned on with the \-\-count_total_payments flag.
.PP
#### Flags
.PP
\- \[ga]\-\-include_incomplete\[ga] \- \[ga]\-\-index_offset\[ga] \-
\[ga]\-\-max_payments\[ga] \- \[ga]\-\-paginate_forwards\[ga] \-
\[ga]\-\-count_total_payments\[ga] \- \[ga]\-\-creation_date_start\[ga]
\- \[ga]\-\-creation_date_end\[ga]
.PP
### \[ga]describegraph\[ga]
.PP
Describe the network graph.
.PP
Prints a human readable version of the known channel graph from the PoV
of the node
.PP
#### Flags
.PP
\- \[ga]\-\-include_unannounced\[ga]
.PP
### \[ga]getnodemetrics\[ga]
.PP
Get node metrics.
.PP
Prints out node metrics calculated from the current graph
.PP
### \[ga]getchaninfo\[ga]
.PP
Get the state of a channel.
.PP
Prints out the latest authenticated state for a particular channel
.PP
#### Flags
.PP
\- \[ga]\-\-chan_id\[ga]
.PP
### \[ga]getnodeinfo\[ga]
.PP
Get information on a specific node.
.PP
Prints out the latest authenticated node state for an advertised node
.PP
#### Flags
.PP
\- \[ga]\-\-pub_key\[ga] \- \[ga]\-\-include_channels\[ga]
.PP
### \[ga]queryroutes\[ga]
.PP
Query a route to a destination.
.PP
Queries the channel router for a potential path to the destination that
has sufficient flow for the amount including fees
.PP
#### Flags
.PP
\- \[ga]\-\-dest\[ga] \- \[ga]\-\-amt\[ga] \- \[ga]\-\-fee_limit\[ga] \-
\[ga]\-\-fee_limit_percent\[ga] \- \[ga]\-\-final_cltv_delta\[ga] \-
\[ga]\-\-use_mc\[ga] \- \[ga]\-\-outgoing_chanid\[ga] \-
\[ga]\-\-ignore_pair\[ga] \- \[ga]\-\-time_pref\[ga] \-
\[ga]\-\-cltv_limit\[ga]
.PP
### \[ga]getnetworkinfo\[ga]
.PP
Get statistical information about the current state of the network.
.PP
Returns a set of statistics pertaining to the known channel graph
.PP
### \[ga]debuglevel\[ga]
.PP
Set the debug level.
.PP
Logging level for all subsystems {trace, debug, info, warn, error,
critical, off} You may also specify
<subsystem>=<level>,<subsystem2>=<level>,...
to set the log level for individual subsystems
.PP
Use show to list available subsystems
.PP
#### Flags
.PP
\- \[ga]\-\-show\[ga] \- \[ga]\-\-level\[ga]
.PP
### \[ga]decodepayreq\[ga]
.PP
Decode a payment request.
.PP
Decode the passed payment request revealing the destination, payment
hash and value of the payment request
.PP
#### Flags
.PP
\- \[ga]\-\-pay_req\[ga]
.PP
### \[ga]listchaintxns\[ga]
.PP
List transactions from the wallet.
.PP
List all transactions an address of the wallet was involved in.
.PP
This call will return a list of wallet related transactions that paid to
an address our wallet controls, or spent utxos that we held.
The start_height and end_height flags can be used to specify an
inclusive block range over which to query for transactions.
If the end_height is less than the start_height, transactions will be
queried in reverse.
To get all transactions until the chain tip, including unconfirmed
transactions (identifiable with BlockHeight=0), set end_height to \-1.
By default, this call will get all transactions our wallet was involved
in, including unconfirmed transactions.
.PP
#### Flags
.PP
\- \[ga]\-\-start_height\[ga] \- \[ga]\-\-end_height\[ga]
.PP
### \[ga]stop\[ga]
.PP
Stop and shutdown the daemon.
.PP
Gracefully stop all daemon subsystems before stopping the daemon itself.
This is equivalent to stopping it using CTRL\-C.
.PP
### \[ga]signmessage\[ga]
.PP
Sign a message with the node\[aq]s private key.
.PP
Sign msg with the resident node\[aq]s private key.
Returns the signature as a zbase32 string.
.PP
Positional arguments and flags can be used interchangeably but not at
the same time!
.PP
#### Flags
.PP
\- \[ga]\-\-msg\[ga]
.PP
### \[ga]verifymessage\[ga]
.PP
Verify a message signed with the signature.
.PP
Verify that the message was signed with a properly\-formed signature The
signature must be zbase32 encoded and signed with the private key of an
active node in the resident node\[aq]s channel database.
.PP
Positional arguments and flags can be used interchangeably but not at
the same time!
.PP
#### Flags
.PP
\- \[ga]\-\-msg\[ga] \- \[ga]\-\-sig\[ga]
.PP
### \[ga]feereport\[ga]
.PP
Display the current fee policies of all active channels.
.PP
Returns the current fee policies of all active channels.
Fee policies can be updated using the updatechanpolicy command.
.PP
### \[ga]updatechanpolicy\[ga]
.PP
Update the channel policy for all channels, or a single channel.
.PP
Updates the channel policy for all channels, or just a particular
channel identified by its channel point.
The update will be committed, and broadcast to the rest of the network
within the next batch.
Channel points are encoded as: funding_txid:output_index
.PP
#### Flags
.PP
\- \[ga]\-\-base_fee_msat\[ga] \- \[ga]\-\-fee_rate\[ga] \-
\[ga]\-\-fee_rate_ppm\[ga] \- \[ga]\-\-time_lock_delta\[ga] \-
\[ga]\-\-min_htlc_msat\[ga] \- \[ga]\-\-max_htlc_msat\[ga] \-
\[ga]\-\-chan_point\[ga]
.PP
### \[ga]fwdinghistory\[ga]
.PP
Query the history of all forwarded HTLCs.
.PP
Query the HTLC switch\[aq]s internal forwarding log for all completed
payment circuits (HTLCs) over a particular time range (\-\-start_time
and \-\-end_time).
The start and end times are meant to be expressed in seconds since the
Unix epoch.
Alternatively negative time ranges can be used, e.g.
\[dq]\-3d\[dq].
Supports s(seconds), m(minutes), h(ours), d(ays), w(eeks), M(onths),
y(ears).
Month equals 30.44 days, year equals 365.25 days.
If \-\-start_time isn\[aq]t provided, then 24 hours ago is used.
If \-\-end_time isn\[aq]t provided, then the current time is used.
.PP
The max number of events returned is 50k.
The default number is 100, callers can use the \-\-max_events param to
modify this value.
.PP
Finally, callers can skip a series of events using the \-\-index_offset
parameter.
Each response will contain the offset index of the last entry.
Using this callers can manually paginate within a time slice.
.PP
#### Flags
.PP
\- \[ga]\-\-start_time\[ga] \- \[ga]\-\-end_time\[ga] \-
\[ga]\-\-index_offset\[ga] \- \[ga]\-\-max_events\[ga] \-
\[ga]\-\-skip_peer_alias_lookup\[ga]
.PP
### \[ga]exportchanbackup\[ga]
.PP
Obtain a static channel back up for a selected channels, or all known
channels.
.PP
This command allows a user to export a Static Channel Backup (SCB) for a
selected channel.
SCB\[aq]s are encrypted backups of a channel\[aq]s initial state that
are encrypted with a key derived from the seed of a user.
In the case of partial or complete data loss, the SCB will allow the
user to reclaim settled funds in the channel at its final state.
The exported channel backups can be restored at a later time using the
restorechanbackup command.
.PP
This command will return one of two types of channel backups depending
on the set of passed arguments:
.PP
* If a target channel point is specified, then a single channel backup
containing only the information for that channel will be returned.
.PP
* If the \-\-all flag is passed, then a multi\-channel backup will be
returned.
A multi backup is a single encrypted blob (displayed in hex encoding)
that contains several channels in a single cipher text.
.PP
Both of the backup types can be restored using the restorechanbackup
command.
.PP
#### Flags
.PP
\- \[ga]\-\-chan_point\[ga] \- \[ga]\-\-all\[ga] \-
\[ga]\-\-output_file\[ga]
.PP
### \[ga]verifychanbackup\[ga]
.PP
Verify an existing channel backup.
.PP
This command allows a user to verify an existing Single or Multi channel
backup for integrity.
This is useful when a user has a backup, but is unsure as to if it\[aq]s
valid or for the target node.
.PP
The command will accept backups in one of three forms:
.PP
* A single channel packed SCB, which can be obtained from
exportchanbackup.
This should be passed in hex encoded format.
.PP
* A packed multi\-channel SCB, which couples several individual static
channel backups in single blob.
.PP
* A file path which points to a packed multi\-channel backup within a
file, using the same format that lnd does in its channel.backup file.
.PP
#### Flags
.PP
\- \[ga]\-\-single_backup\[ga] \- \[ga]\-\-multi_backup\[ga] \-
\[ga]\-\-multi_file\[ga]
.PP
### \[ga]restorechanbackup\[ga]
.PP
Restore an existing single or multi\-channel static channel backup.
.PP
Allows a user to restore a Static Channel Backup (SCB) that was obtained
either via the exportchanbackup command, or from lnd\[aq]s automatically
managed channel.backup file.
This command should be used if a user is attempting to restore a channel
due to data loss on a running node restored with the same seed as the
node that created the channel.
If successful, this command will allows the user to recover the settled
funds stored in the recovered channels.
.PP
The command will accept backups in one of three forms:
.PP
* A single channel packed SCB, which can be obtained from
exportchanbackup.
This should be passed in hex encoded format.
.PP
* A packed multi\-channel SCB, which couples several individual static
channel backups in single blob.
.PP
* A file path which points to a packed multi\-channel backup within a
file, using the same format that lnd does in its channel.backup file.
.PP
#### Flags
.PP
\- \[ga]\-\-single_backup\[ga] \- \[ga]\-\-multi_backup\[ga] \-
\[ga]\-\-multi_file\[ga]
.PP
### \[ga]bakemacaroon\[ga]
.PP
Bakes a new macaroon with the provided list of permissions and
restrictions.
.PP
Bake a new macaroon that grants the provided permissions and optionally
adds restrictions (timeout, IP address) to it.
.PP
The new macaroon can either be shown on command line in hex serialized
format or it can be saved directly to a file using the \-\-save_to
argument.
.PP
A permission is a tuple of an entity and an action, separated by a
colon.
Multiple operations can be added as arguments, for example:
.PP
lncli bakemacaroon info:read invoices:write foo:bar
.PP
For even more fine\-grained permission control, it is also possible to
specify single RPC method URIs that are allowed to be accessed by a
macaroon.
This can be achieved by specifying \[dq]uri:<methodURI>\[dq] pairs, for
example:
.PP
lncli bakemacaroon uri:/lnrpc.Lightning/GetInfo
uri:/verrpc.Versioner/GetVersion
.PP
The macaroon created by this command would only be allowed to use the
\[dq]lncli getinfo\[dq] and \[dq]lncli version\[dq] commands.
.PP
To get a list of all available URIs and permissions, use the \[dq]lncli
listpermissions\[dq] command.
.PP
#### Flags
.PP
\- \[ga]\-\-save_to\[ga] \- \[ga]\-\-timeout\[ga] \-
\[ga]\-\-ip_address\[ga] \- \[ga]\-\-custom_caveat_name\[ga] \-
\[ga]\-\-custom_caveat_condition\[ga] \- \[ga]\-\-root_key_id\[ga] \-
\[ga]\-\-allow_external_permissions\[ga]
.PP
### \[ga]listmacaroonids\[ga]
.PP
List all macaroons root key IDs in use.
.PP
### \[ga]deletemacaroonid\[ga]
.PP
Delete a specific macaroon ID.
.PP
Remove a macaroon ID using the specified root key ID.
For example:
.PP
lncli deletemacaroonid 1
.PP
WARNING When the ID is deleted, all macaroons created from that root key
will be invalidated.
.PP
Note that the default root key ID 0 cannot be deleted.
.PP
### \[ga]listpermissions\[ga]
.PP
Lists all RPC method URIs and the macaroon permissions they require to
be invoked.
.PP
### \[ga]printmacaroon\[ga]
.PP
Print the content of a macaroon in a human readable format.
.PP
Decode a macaroon and show its content in a more human readable format.
The macaroon can either be passed as a hex encoded positional parameter
or loaded from a file.
.PP
#### Flags
.PP
\- \[ga]\-\-macaroon_file\[ga]
.PP
### \[ga]constrainmacaroon\[ga]
.PP
Adds one or more restriction(s) to an existing macaroon
.PP
Add one or more first\-party caveat(s) (a.k.a.
constraints/restrictions) to an existing macaroon.
.PP
#### Flags
.PP
\- \[ga]\-\-timeout\[ga] \- \[ga]\-\-ip_address\[ga] \-
\[ga]\-\-custom_caveat_name\[ga] \-
\[ga]\-\-custom_caveat_condition\[ga]
.PP
### \[ga]trackpayment\[ga]
.PP
Track progress of an existing payment.
.PP
Pick up monitoring the progression of a previously initiated payment
specified by the hash argument.
.PP
#### Flags
.PP
\- \[ga]\-\-json\[ga]
.PP
### \[ga]version\[ga]
.PP
Display lncli and lnd version info.
.PP
Returns version information about both lncli and lnd.
If lncli is unable to connect to lnd, the command fails but still prints
the lncli version.
.PP
### \[ga]profile\[ga]
.PP
Create and manage lncli profiles.
.PP
Profiles for lncli are an easy and comfortable way to manage multiple
nodes from the command line by storing node specific parameters like RPC
host, network, TLS certificate path or macaroons in a named profile.
.PP
To use a predefined profile, just use the
\[aq]\-\-profile=myprofile\[aq] (or short version
\[aq]\-p=myprofile\[aq]) with any lncli command.
.PP
A default profile can also be defined, lncli will then always use the
connection/node parameters from that profile instead of the default
values.
.PP
WARNING: Setting a default profile changes the default behavior of
lncli! To disable the use of the default profile for a single command,
set \[aq]\-\-profile= \[aq].
.PP
The profiles are stored in a file called profiles.json in the user\[aq]s
home directory, for example: \[ti]/.lncli/profiles.json on Linux
\[ti]/Library/Application Support/Lncli/profiles.json on MacOS
.PP
### \[ga]state\[ga]
.PP
Get the current state of the wallet and RPC
.PP
Get the current state of the wallet.
The possible states are: \- WAITING_TO_START: node is waiting to become
the leader in a cluster and is not started yet.
\- NON_EXISTING: wallet has not yet been initialized.
\- LOCKED: wallet is locked.
\- UNLOCKED: wallet was unlocked successfully, but RPC server isn\[aq]t
ready.
\- RPC_ACTIVE: RPC server is active but not fully ready for calls.
\- SERVER_ACTIVE: RPC server is available and ready to accept calls.
.PP
### \[ga]deletepayments\[ga]
.PP
Delete a single or multiple payments from the database.
.PP
This command either deletes all failed payments or a single payment from
the database to reclaim disk space.
.PP
If the \-\-all flag is used, then all failed payments are removed.
If so desired, _ALL_ payments (even the successful ones) can be deleted
by additionally specifying \-\-include_non_failed.
.PP
If a \-\-payment_hash is specified, that single payment is deleted,
independent of its state.
.PP
If \-\-failed_htlcs_only is specified then the payments themselves (or
the single payment itself if used with \-\-payment_hash) is not deleted,
only the information about any failed HTLC attempts during the payment.
.PP
NOTE: Removing payments from the database does free up disk space within
the internal bbolt database.
But that disk space is only reclaimed after compacting the database.
Users might want to turn on auto compaction (db.bolt.auto\-compact=true
in the config file or \-\-db.bolt.auto\-compact as a command line flag)
and restart lnd after deleting a large number of payments to see a
reduction in the file size of the channel.db file.
.PP
#### Flags
.PP
\- \[ga]\-\-all\[ga] \- \[ga]\-\-payment_hash\[ga] \-
\[ga]\-\-failed_htlcs_only\[ga] \- \[ga]\-\-include_non_failed\[ga]
.PP
### \[ga]sendcustom\[ga]
.PP
#### Flags
.PP
\- \[ga]\-\-peer\[ga] \- \[ga]\-\-type\[ga] \- \[ga]\-\-data\[ga]
.PP
### \[ga]subscribecustom\[ga]
.PP
### \[ga]fish\-completion\[ga]
.PP
### \[ga]listaliases\[ga]
.PP
List all aliases.
.PP
### \[ga]querymc\[ga]
.PP
Query the internal mission control state.
.PP
### \[ga]importmc\[ga]
.PP
Import a result to the internal mission control state.
.PP
#### Flags
.PP
\- \[ga]\-\-failure\[ga] \- \[ga]\-\-force\[ga]
.PP
### \[ga]queryprob\[ga]
.PP
Deprecated.
Estimate a success probability.
.PP
### \[ga]resetmc\[ga]
.PP
Reset internal mission control state.
.PP
### \[ga]buildroute\[ga]
.PP
Build a route from a list of hop pubkeys.
.PP
#### Flags
.PP
\- \[ga]\-\-amt\[ga] \- \[ga]\-\-final_cltv_delta\[ga] \-
\[ga]\-\-hops\[ga] \- \[ga]\-\-outgoing_chan_id\[ga] \-
\[ga]\-\-payment_addr\[ga]
.PP
### \[ga]getmccfg\[ga]
.PP
Display mission control\[aq]s config.
.PP
Returns the config currently being used by mission control.
.PP
### \[ga]setmccfg\[ga]
.PP
Set mission control\[aq]s config.
.PP
Update the config values being used by mission control to calculate the
probability that payment routes will succeed.
.PP
#### Flags
.PP
\- \[ga]\-\-halflife\[ga] \- \[ga]\-\-hopprob\[ga] \-
\[ga]\-\-weight\[ga] \- \[ga]\-\-pmtnr\[ga] \- \[ga]\-\-failrelax\[ga]
.PP
### \[ga]updatechanstatus\[ga]
.PP
Set the status of an existing channel on the network.
.PP
Set the status of an existing channel on the network.
The actions can be \[dq]enable\[dq], \[dq]disable\[dq], or
\[dq]auto\[dq].
If the action changes the status, a message will be broadcast over the
network.
.PP
Note that enabling / disabling a channel using this command ONLY affects
what\[aq]s advertised over the network.
For example, disabling a channel using this command does not close it.
.PP
If a channel is manually disabled, automatic / background requests to
re\-enable the channel will be ignored.
However, if a channel is manually enabled, automatic / background
requests to disable the channel will succeed (such requests are usually
made on channel close or when the peer is down).
.PP
The \[dq]auto\[dq] action restores automatic channel state management.
Per the behavior described above, it\[aq]s only needed to undo the
effect of a prior \[dq]disable\[dq] action, and will be a no\-op
otherwise.
.PP
#### Flags
.PP
\- \[ga]\-\-funding_txid\[ga] \- \[ga]\-\-output_index\[ga] \-
\[ga]\-\-chan_point\[ga] \- \[ga]\-\-action\[ga]
.PP
### \[ga]wtclient\[ga]
.PP
Interact with the watchtower client.
.PP
### \[ga]importgraph\[ga]
.PP
Import the network graph.
.PP
Imports graph from describegraph JSON
.PP
## Global Flags
.PP
\- \[ga]\-\-rpcserver\[ga] \- \[ga]\-\-lnddir\[ga] \-
\[ga]\-\-socksproxy\[ga] \- \[ga]\-\-tlscertpath\[ga] \- \[ga]\-\-chain,
c\[ga] \- \[ga]\-\-network, n\[ga] \- \[ga]\-\-no\-macaroons\[ga] \-
\[ga]\-\-macaroonpath\[ga] \- \[ga]\-\-macaroontimeout\[ga] \-
\[ga]\-\-macaroonip\[ga] \- \[ga]\-\-profile, p\[ga] \-
\[ga]\-\-macfromjar\[ga] \- \[ga]\-\-metadata\[ga] \-
\[ga]\-\-insecure\[ga]
